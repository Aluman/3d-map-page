{"version":3,"sources":["App.tsx","index.tsx"],"names":["font","THREE","parse","fontJson","App","canvasContainerRef","useRef","canvasRef","useEffect","current","scene","background","camera","hemisphereLight","undefined","name","add","mixer","renderer","canvas","setSize","clientWidth","clientHeight","animation","clock","GLTFLoader","load","gltf","console","log","clipAction","animations","play","cameras","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","controls","OrbitControls","domElement","position","set","update","xhr","loaded","total","err","error","animate","requestAnimationFrame","delta","getDelta","obj","getObjectByName","parent","remove","currentTimeStr","DateTime","local","toFormat","shapes","generateShapes","geometry","rotateX","Math","PI","computeBoundingBox","xWidth","boundingBox","max","x","min","zWidth","z","translate","text","color","side","render","cancelAnimationFrame","ref","style","top","left","width","height","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a55466ff.chunk.js","sourcesContent":["import { useRef, useEffect } from \"react\";\nimport { DateTime } from \"luxon\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\n\nimport fontJson from \"./font.json\";\n\nconst font: THREE.Font = new THREE.FontLoader().parse(fontJson);\n\nexport const App: React.FC = () => {\n  const canvasContainerRef = useRef<HTMLDivElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (!canvasRef.current || !canvasContainerRef.current) return;\n\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xa0a0a0);\n    const hemisphereLight = new THREE.HemisphereLight(\"gray\", undefined, 0.7);\n    hemisphereLight.name = \"hemisphereLightLight\";\n    scene.add(hemisphereLight);\n\n    let camera: THREE.Camera;\n\n    const renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current });\n    renderer.setSize(\n      canvasContainerRef.current?.clientWidth,\n      canvasContainerRef.current?.clientHeight\n    );\n\n    let mixer: THREE.AnimationMixer;\n    const clock = new THREE.Clock();\n    const sceneLoader = new GLTFLoader();\n    sceneLoader.load(\n      \"1.glb\",\n      (gltf) => {\n        console.log(gltf);\n        scene.add(gltf.scene);\n        mixer = new THREE.AnimationMixer(gltf.scene);\n        mixer.clipAction(gltf.animations[0]).play();\n\n        if (gltf.cameras[0]) {\n          camera = gltf.cameras[0];\n          (camera as any).aspect =\n            canvasContainerRef.current!.clientWidth /\n            canvasContainerRef.current!.clientHeight;\n          (camera as any).aspect = window.innerWidth / window.innerHeight;\n          (camera as any).updateProjectionMatrix();\n        } else {\n          camera = new THREE.PerspectiveCamera(\n            75,\n            canvasContainerRef.current!.clientWidth /\n              canvasContainerRef.current!.clientHeight,\n            0.1,\n            1000\n          );\n          const controls = new OrbitControls(camera, renderer.domElement);\n          camera.position.set(25, 25, 25);\n          controls.update();\n        }\n      },\n      (xhr) => console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\"),\n      (err) => console.error(err)\n    );\n\n    let animation: number;\n    const animate = () => {\n      animation = requestAnimationFrame(animate);\n      if (!camera) return;\n      // Анимации\n      const delta = clock.getDelta();\n      mixer?.update(delta);\n\n      // Добавление текущего времени\n      const obj = scene.getObjectByName(\"currentTime\");\n      obj?.parent?.remove(obj);\n      const currentTimeStr: string = DateTime.local().toFormat(\"HH:mm:ss\");\n      const shapes = font.generateShapes(currentTimeStr, 10);\n      const geometry = new THREE.ShapeBufferGeometry(shapes);\n      geometry.rotateX(-Math.PI / 2);\n      geometry.computeBoundingBox();\n      const xWidth = geometry.boundingBox!.max.x - geometry.boundingBox!.min.x;\n      const zWidth = geometry.boundingBox!.max.z - geometry.boundingBox!.min.z;\n      geometry.translate(-2.4 - xWidth / 2, 0.5, zWidth / 2);\n      const text = new THREE.Mesh(\n        geometry,\n        new THREE.MeshBasicMaterial({\n          color: \"gray\",\n          side: THREE.DoubleSide,\n        })\n      );\n      text.name = \"currentTime\";\n      scene.add(text);\n\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    return () => {\n      cancelAnimationFrame(animation);\n    };\n  }, [\n    canvasRef.current,\n    canvasContainerRef.current?.clientWidth,\n    canvasContainerRef.current?.clientHeight,\n  ]);\n\n  return (\n    <div\n      ref={canvasContainerRef}\n      style={{\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n      }}\n    >\n      <canvas ref={canvasRef} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}